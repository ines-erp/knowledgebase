@startuml

' Define classes
abstract class Item {
  + itemId: String
  + sku: String
  + name: String
  + description: String
  + categoryId: String
  + cost: Double
  + price: Double = 0
  + isActive: Boolean
  + isForSale: Boolean
}

note right of Item::price
    Products that are not for sale could
    have stay with the default price as 0
end note

class Product extends Item{
  + stockLevel: Int
  + minimumStockLevel: Int
  + maximumStockLevel: Int
  + batchNumber: String | None
  + expiryDate: Date | None
  + type: String
  + updateStockLevel(quantity: Int): void
  + checkLowStock(): Boolean
  + checkOverstock(): Boolean
}

note right of Product::type
    Resource, consumable, sale, etc.
end note


class Service extends Item{
  + duration: Int
  + productRequired: List<Product>
}

class Warehouse {
  + warehouseId: String
  + name: String
  + location: String
  + contactPerson: String
  + isActive: Boolean
  + getStockLevel(itemId: String): Int
  + transferStock(itemId: String, quantity: Int, destinationWarehouseId: String): void
}

class StockTransaction{}
note top of StockTransaction : Extends common Abstract class Transaction.

class ItemCategory{}
note top of ItemCategory: Extends common Abstract class Category.


@enduml