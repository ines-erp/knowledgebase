@startuml

' Define classes
class Item {
  + itemId: String
  + sku: String
  + name: String
  + description: String
  + categoryId: String
  + cost: Double
  + isActive: Boolean
}

class Product {
  + price: Double
  + stockLevel: Int
  + minimumStockLevel: Int
  + maximumStockLevel: Int
  + batchNumber: String
  + expiryDate: Date
  + updateStockLevel(quantity: Int): void
  + checkLowStock(): Boolean
  + checkOverstock(): Boolean
}

class Service{
  + price: Double
  + duration: Int
  + resourcesRequired: List<Resource>
  + consumablesRequired: List<Consumable>
}

class Category {
  + categoryId: String
  + name: String
  + description: String
  + addItem(itemId: String): void
  + removeItem(itemId: String): void
}

class Resource{
  + type: String
  + availability: String
  + stockLevel: Int
}

class Consumable{
  + stockLevel: Int
}

class Group {
  + groupId: String
  + name: String
  + description: String
  + items: List<InventoryItem>
  + addItem(itemId: String): void
  + removeItem(itemId: String): void
}

class Warehouse {
  + warehouseId: String
  + name: String
  + location: String
  + contactPerson: String
  + isActive: Boolean
  + getStockLevel(itemId: String): Int
  + transferStock(itemId: String, quantity: Int, destinationWarehouseId: String): void
}

class StockTransaction {
  + transactionId: String
  + itemId: String
  + warehouseId: String
  + transactionType: String
  + quantity: Int
  + transactionDate: Date
  + relatedOrderId: String
  + notes: String
  + logTransaction(): void
}

class Report {
  + reportId: String
  + reportType: String
  + generatedDate: Date
  + parameters: Map<String, String>
  + generateReport(): void
  + exportReport(format: String): void
}

'' Define relationships
'Item <|-- Product : extends <
'Item <|-- Service : extends <
'Item <|-- Resource : extends <
'Item <|-- Consumable : extends <
'
'Item "1" --> "1" Category : belongs to >
'Item "1" --> "0..*" Group : part of >
'Service "1" --> "0..*" Resource : requires >
'Service "1" --> "0..*" Consumable : requires >
'
'Warehouse "1..*" --> "0..*" Product : has >
'Warehouse "1..*" --> "0..*" Consumable : has >
'Warehouse "1..*" --> "0..*" Resource : has >
'
'' StockTransaction can reference any Inventory Item
'StockTransaction "1" --> "1" Warehouse : occurs in >
'StockTransaction "1" --> "1" Item : tracks >
'
'Report "1" --> "0..*" Item : based on >
'Report "1" --> "0..*" StockTransaction : based on >

@enduml