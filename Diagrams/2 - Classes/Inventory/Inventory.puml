@startuml

' Define classes
class InventoryItem {
  + itemId: String
  + sku: String
  + name: String
  + description: String
  + categoryId: String
  + cost: Double
  + price: Double
  + isActive: Boolean
}

class ProductItem {
  + stockLevel: Int
  + minimumStockLevel: Int
  + maximumStockLevel: Int
  + batchNumber: String
  + expiryDate: Date
  + updateStockLevel(quantity: Int): void
  + checkLowStock(): Boolean
  + checkOverstock(): Boolean
}

class ServiceItem {
  + duration: Int
  + resourcesRequired: List<Resource>
  + consumablesRequired: List<Consumable>
}

class Category {
  + categoryId: String
  + name: String
  + description: String
  + addItem(itemId: String): void
  + removeItem(itemId: String): void
}

class Resource {
  + resourceId: String
  + name: String
  + type: String
  + availability: String
  + cost: Double
}

class Consumable {
  + consumableId: String
  + name: String
  + description: String
  + stockLevel: Int
  + cost: Double
}

class Group {
  + groupId: String
  + name: String
  + description: String
  + items: List<InventoryItem>
  + addItem(itemId: String): void
  + removeItem(itemId: String): void
}

class Warehouse {
  + warehouseId: String
  + name: String
  + location: String
  + contactPerson: String
  + isActive: Boolean
  + getStockLevel(itemId: String): Int
  + transferStock(itemId: String, quantity: Int, destinationWarehouseId: String): void
}

class StockTransaction {
  + transactionId: String
  + itemId: String
  + warehouseId: String
  + transactionType: String
  + quantity: Int
  + transactionDate: Date
  + relatedOrderId: String
  + notes: String
  + logTransaction(): void
}

class Supplier {
  + supplierId: String
  + name: String
  + contactInfo: String
  + leadTime: Int
  + performanceRating: Double
  + addPurchaseOrder(orderId: String): void
  + updatePerformanceRating(rating: Double): void
}

class PurchaseOrder {
  + purchaseOrderId: String
  + supplierId: String
  + items: List<InventoryItem>
  + orderDate: Date
  + expectedDeliveryDate: Date
  + status: String
  + receiveStock(): void
  + cancelOrder(): void
}

class Report {
  + reportId: String
  + reportType: String
  + generatedDate: Date
  + parameters: Map<String, String>
  + generateReport(): void
  + exportReport(format: String): void
}

' Define relationships
InventoryItem <|-- ProductItem
InventoryItem <|-- ServiceItem

InventoryItem "1" --> "1" Category : belongs to >
InventoryItem "1" --> "0..*" Group : part of >
StockTransaction "1" --> "1" ProductItem : tracks >
StockTransaction "1" --> "1" Warehouse : occurs in >
PurchaseOrder "1" --> "1" Supplier : placed by >
PurchaseOrder "1" --> "1..*" InventoryItem : includes >
ServiceItem "1" --> "0..*" Resource : requires >
ServiceItem "1" --> "0..*" Consumable : requires >
Report "1" --> "0..*" InventoryItem : based on >
Report "1" --> "0..*" StockTransaction : based on >
Report "1" --> "0..*" PurchaseOrder : based on >

@enduml